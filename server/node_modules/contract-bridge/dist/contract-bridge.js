var bridge=function(r){var t={};function e(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return r[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=r,e.c=t,e.d=function(r,t,n){e.o(r,t)||Object.defineProperty(r,t,{enumerable:!0,get:n})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,t){if(1&t&&(r=e(r)),8&t)return r;if(4&t&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&t&&"string"!=typeof r)for(var o in r)e.d(n,o,function(t){return r[t]}.bind(null,o));return n},e.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(t,"a",t),t},e.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},e.p="",e(e.s=4)}([function(r,t){r.exports={boardGroups:function(r,t){if(!(r>0&&r<100&&r%1==0))throw"boardCnt invalid";if(!(t>0&&t<100&&t%1==0))throw"GroupCnt invalid";if(!(r>=t))throw"boardCnt - groupCnt ratio invalid";let e=[];if(Math.ceil(r/Math.ceil(r/t))===t){for(var n=0;n<t;n++)e.push([]);for(n=0;n<r;n++){e[Math.floor(n/Math.ceil(r/t))].push(n)}}else{if(!(Math.ceil(r/Math.ceil(r/t))<t))throw"algorithm selection invalid";for(n=0;n<t;n++)e.push([]);for(n=0;n<r;n++){e[Math.floor(n/(r/t))].push(n)}}return e},boardGroups1:function(r,t){if(!(r>0&&r<100&&r%1==0))throw"boardCnt invalid";if(!(t>0&&t<100&&t%1==0))throw"GroupCnt invalid";if(!(r>=t))throw"boardCnt - groupCnt ratio invalid";let e=[];for(var n=0;n<t;n++)e.push([]);for(n=0;n<r;n++){e[Math.floor(n/Math.ceil(r/t))].push(n)}return e},boardGroups2:function(r,t){if(!(r>0&&r<100&&r%1==0))throw"boardCnt invalid";if(!(t>0&&t<100&&t%1==0))throw"GroupCnt invalid";if(!(r>=t))throw"boardCnt - groupCnt ratio invalid";let e=[];for(var n=0;n<t;n++)e.push([]);for(n=0;n<r;n++){e[Math.floor(n/(r/t))].push(n)}return e}}},function(r,t){r.exports={mod:function(r,t){return(r%t+t)%t}}},function(r,t){r.exports={factorial:function(r){if(isNaN(r))throw"1014: Input must be a number.";if(!Number.isInteger(r))throw"1014: Input must be an Integer.";if(r<0)throw"1014: Input must be larger or equal to 0.";for(var t=1,e=2;e<=r;e++)t*=e;return Math.round(t)},binomial:function(r,t){if("number"!=typeof r||"number"!=typeof t)throw"1014: Input must be numbers.";if(r%1!=0&&t%1!=0)throw"1014: Input must be Integers.";if(t>r)throw"1014: n must be greater or equal to k.";if(r<0||t<0)throw"1014: n and k must be larger or equal to 0.";for(var e=1,n=r-t+1;n<=r;n++)e*=n;for(n=1;n<=t;n++)e/=n;return Math.round(e)},percentageRounded:function(r){if("number"!=typeof r)throw"1014: Input must be a number.";return Math.round(1e4*r)/1e4}}},function(r,t,e){const{binomial:n,factorial:o,percentageRounded:a}=e(2);function i(r,t=[13,13],e=!0){return 100*n(r[0]+r[1],r[0])*o(t[0])*o(t[1])*o(t[0]+t[1]-r[0]-r[1])/o(t[0]+t[1])/o(t[0]-r[0])/o(t[1]-r[1])}r.exports={missingCardsDistribution:function(r,t=[13,13]){if(![...Array(14).keys()].slice(1).includes(r))throw"1014: cardCnt invalid.";let e=[];for(var a=0;a<=r;a++)e.push([[a,r-a],n(r,a)*o(t[0])*o(t[1])*o(t[0]+t[1]-r)/o(t[0]+t[1])/o(t[0]-a)/o(t[1]-r+a)]);return e},missingHighcardsDistribution:function(r,t=0){if(![...Array(14).keys()].slice(1).includes(r))throw"1014: cardCnt invalid.";if(![...Array(14).keys()].includes(t))throw"1014: highcardCnt invalid.";if(r<t)throw"1014: cardCnt must be larger than highcardCnt";let e=[];for(var n=0;n<=r;n++)for(var o=0;o<=t;o++)n>=o&&r-n>=t-o&&e.push([[n,r-n],[o,t-o],Math.round(i([o,t-o],[n,r-n])*i([n,r-n]))/100]);return e}}},function(r,t,e){r.exports={movements:e(5),scoring:e(15),statistics:e(20),enum:e(23)}},function(r,t,e){r.exports={awl:e(6),boardGroups:e(0),mitchell_crisscross:e(7),mitchell_extendedhesitation:e(8),mitchell_relayandbye:e(9),mitchell_skip:e(10),mitchell_twostanza:e(11),mitchell:e(12),modulo:e(1),tests:e(13),web:e(14)}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={awl:function(r,t){let e=Math.ceil(r/2);if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt must be positive";if(!(r<300))throw"pairCnt must be smaller than 300";if(e%1!=0)throw"tableCnt must be Integer";if(e%2!=1)throw"tableCnt must be odd";if(!(e>0))throw"tableCnt must be positive";if(!(e<=150))throw"tableCnt must be 150 or smaller";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt must be positive";if(!(t<100))throw"boardCnt must be smaller than 100";let a=[];for(var i=0;i<e;i++)for(var s=0;s<e;s++)a.push({tableNr:i,roundNr:s,ns:i,ew:o(i+2*s,e)+100,boardGroup:o(i+s,e),boards:n(t,e)[o(i+s,e)]});return a}}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={mitchell_crisscross:function(r,t){let e=Math.ceil(r/2);if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt must be positive";if(!(r<300))throw"pairCnt must be smaller than 300";if(e%1!=0)throw"tableCnt must be Integer";if(e%4!=0)throw"tableCnt must a multiple of 4";if(!(e>0))throw"tableCnt must be positive";if(!(e<=150))throw"tableCnt must be 150 or smaller";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt must be positive";if(!(t<100))throw"boardCnt must be smaller than 100";let a=[];for(var i=0;i<e;i++)for(var s=0;s<e;s++)if(s<e/2)(i+s)%2==0?a.push({tableNr:i,roundNr:s,ns:i,ew:o(i+s,e)+100,boardGroup:o(i-s,e),boards:n(t,e)[o(i-s,e)]}):a.push({tableNr:i,roundNr:s,ns:i,ew:o(i-s,e)+100,boardGroup:o(i+s,e),boards:n(t,e)[o(i+s,e)]});else{(i+s)%2==0?a.push({tableNr:i,roundNr:s,ns:i,ew:o(i+s,e)+100,boardGroup:o(i-s+(e-2)/2,e),boards:n(t,e)[o(i-s+(e-2)/2,e)]}):a.push({tableNr:i,roundNr:s,ns:i,ew:o(i-s,e)+100,boardGroup:o(i+s-(e-2)/2,e),boards:n(t,e)[o(i+s-(e-2)/2,e)]})}return a}}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={mitchell_extendedhesitation:function(r){if(r%1!=0)throw"boardCnt must be Integer";if(!(r>0))throw"boardCnt > 0!";if(!(r<100))throw"boardCnt < 100!";let t=[];const e=[[[0,3,0],[0,2,1],[0,5,2],[0,4,3],[0,1,4]],[[1,4,2],[1,3,3],[2,1,0],[5,1,1],[3,5,4]],[[2,5,3],[5,4,0],[4,3,1],[3,2,2],[0,1,4]]];for(var o=0;o<3;o++)for(var a=0;a<3;a++)t.push({tableNr:o,roundNr:a,ns:e[o][a][0],ew:e[o][a][1],boardGroup:e[o][a][2],boards:n(r,4)[e[o][a][2]]});return t}}},function(r,t){},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={mitchell_skip:function(r,t){const e=Math.ceil(r/2);if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt must be larger than 0";if(!(r<300))throw"pairCnt must be smaller than 300";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt must be larger than 0";if(!(t<100))throw"boardCnt must be smaller than 100";if(e%1!=0)throw"tableCnt must be Integer";if(e%2!=1)throw"tableCnt must be even";const a=e;let i=[];for(var s=0;s<e;s++)for(var u=0;u<a;u++)e%2==0&&a/2==u||i.push({tableNr:s,roundNr:u,ns:s,ew:o(s-u,e)+100,boardGroup:(s+u)%e,boards:n(t,e)[(s+u)%e]});return i}}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={mitchell_twostanza:function(r,t,e=null){let a=Math.ceil(r/2);if(null==e&&(e=Math.floor(a/2)),e%1!=0)throw"breakNr must be Integer";if(!(e<=a))throw"breakNr must be smaller than tableCnt/roundCnt";if(!(e>0))throw"breakNr must be larger than 0";if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt must be larger than 0";if(!(r<100))throw"pairCnt must be smaller than 100";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt must be larger than 0";if(!(t<100))throw"boardCnt must be smaller than 100";if(a%1!=0)throw"tableCnt must be Integer";if(!(a>0))throw"tableCnt must be larger than 0";if(!(a<=50))throw"tableCnt must be 50 or smaller";if(a%2!=0)throw"tableCnt must be even";if(a%4==0&&8!==a&&12!==a&&a%2==0)throw"tableCnt can not be a multiple of 4, except for 8 and 12";let i=[];if(8==a)for(var s=0;s<a;s++)for(var u=0;u<a;u++){let r=0;s>3&&(r=1),i.push({tableNr:u,roundNr:s,ns:u,ew:o(u-2*s-r,a)+100,boardGroup:o(u+s,e)+e*Math.floor(s/e),boards:n(t,a)[o(u+s,e)+e*Math.floor(s/e)]})}else if(12==a)for(s=0;s<a;s++)for(u=0;u<a;u++){let r=0;s>2&&(r=3),s>8&&(r=6),i.push({tableNr:u,roundNr:s,ns:u,ew:o(u-s-r,a)+100,boardGroup:o(u+s,e)+e*Math.floor(s/e),boards:n(t,a)[o(u+s,e)+e*Math.floor(s/e)]})}else if(a%2==0)for(s=0;s<a;s++)for(u=0;u<a;u++)s<e?i.push({tableNr:u,roundNr:s,ns:u,ew:o(u-s,a)+100,boardGroup:o(u+s,e),boards:n(t,a)[o(u+s,e)]}):s>=e&&i.push({tableNr:u,roundNr:s,ns:u,ew:o(u-s,a)+100,boardGroup:e+o(u+s,a-e),boards:n(t,a)[e+o(u+s,a-e)]});return i}}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);r.exports={mitchell:function(r,t){let e=Math.ceil(r/2);if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt > 0!";if(!(r<300))throw"pairCnt < 300!";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt > 0!";if(!(t<100))throw"boardCnt < 100!";if(e%1!=0)throw"tableCnt must be Integer";if(e%2!=1)throw"tableCnt % 2 == 0!";let a=[];for(var i=0;i<e;i++)for(var s=0;s<e;s++)a.push({tableNr:i,roundNr:s,ns:i,ew:o(i-s,e)+100,boardGroup:o(i+s,e),boards:n(t,e)[o(i+s,e)]});return a}}},function(r,t){r.exports={testPlayedEachPair:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].ew-100]=e[r[o].ns][r[o].ew-100]+1;return JSON.stringify(e)===JSON.stringify(n)},testPlayedNoPairTwice:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].ew-100]=e[r[o].ns][r[o].ew-100]+1;for(o=0;o<e.length;o++)for(a=0;a<e[o].length;a++)if(e[o][a]>n[o][a])return!1;return!0},testPlayedEachBoardgroup:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].boardGroup]=e[r[o].ns][r[o].boardGroup]+1;return JSON.stringify(e)===JSON.stringify(n)},testPlayedNoBoardgroupTwice:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].boardGroup]=e[r[o].ns][r[o].boardGroup]+1;for(o=0;o<e.length;o++)for(a=0;a<e[o].length;a++)if(e[o][a]>n[o][a])return!1;return!0},testPlayedEachRound:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].roundNr]=e[r[o].ns][r[o].roundNr]+1;return JSON.stringify(e)===JSON.stringify(n)},testPlayedNoRoundTwice:function(r,t){let e=[],n=[];for(var o=0;o<t/2;o++){e.push([]),n.push([]);for(var a=0;a<t/2;a++)e[o].push(0),n[o].push(1)}for(o=0;o<r.length;o++)e[r[o].ns][r[o].roundNr]=e[r[o].ns][r[o].roundNr]+1;for(o=0;o<e.length;o++)for(a=0;a<e[o].length;a++)if(e[o][a]>n[o][a])return!1;return!0},testBoardgroupEachBoard:function(r,t){let e=Array.prototype.concat.apply([],r);for(var n=0;n<t;n++)if(!(n in e))return!1;return e.length===t}}},function(r,t,e){const{boardGroups:n}=e(0),{mod:o}=e(1);function a(r,t){let e=Math.ceil(r/2);if(r%1!=0)throw"pairCnt must be Integer";if(!(r>0))throw"pairCnt > 0!";if(!(r<300))throw"pairCnt < 300!";if(t%1!=0)throw"boardCnt must be Integer";if(!(t>0))throw"boardCnt > 0!";if(!(t<100))throw"boardCnt < 100!";if(e%1!=0)throw"tableCnt must be Integer";if(e%2!=1)throw"tableCnt % 2 == 0!";let a=[];for(var i=0;i<e;i++)for(var s=0;s<e;s++)a.push({tableNr:i,roundNr:s,ns:i,ew:o(i-s,e)+100,boardGroup:o(i+s,e),boards:n(t,e)[o(i+s,e)]});return a}r.exports={web:a}},function(r,t,e){r.exports={imps:e(16),matchpoints:e(17),score:e(18),victorypoints:e(19)}},function(r,t){r.exports={scoreToImps:function(r){if(r%10!=0)throw"scoreDifference % 10 == 0!";if(!(r<1e4))throw"scoreDifference < 10000!";if(!(r>-1e4))throw"scoreDifference > -10000";let t=0,e=!1;switch(r<0&&(r=-r,e=!0),!0){case r<20:t=0;break;case r<=40:t=1;break;case r<=80:t=2;break;case r<=120:t=3;break;case r<=160:t=4;break;case r<=210:t=5;break;case r<=260:t=6;break;case r<=310:t=7;break;case r<=360:t=8;break;case r<=420:t=9;break;case r<=490:t=10;break;case r<=590:t=11;break;case r<=740:t=12;break;case r<=890:t=13;break;case r<=1090:t=14;break;case r<=1290:t=15;break;case r<=1490:t=16;break;case r<=1740:t=17;break;case r<=1990:t=18;break;case r<=2240:t=19;break;case r<=2490:t=20;break;case r<=2990:t=21;break;case r<=3490:t=22;break;case r<=3990:t=23;break;case r>=4e3:t=24;break;default:t=0}return e&&(t=-t),t}}},function(r,t){r.exports={scoresToMatchpoints:function(r){let t=[],e=[],n=[];for(var o=0;o<r.length;o++)t.push(2*r.length-2*(o+1)),e.push([0,0]),n.push(0);for(var a=0;a<n.length;a++)for(var i=0;i<r.length;i++)a!=i&&(r[a]<r[i]?e[a][0]+=1:r[a]==r[i]&&(e[a][1]+=1));for(a=0;a<n.length;a++)if(0==e[a][1])n[a]=t[e[a][0]];else{for(i=0;i<e[a][1]+1;i++)n[a]+=t[e[a][0]+i];n[a]=Math.round(100*n[a]/(e[a][1]+1))/100}return n},matchpointsToPercentages:function(r){let t=[];if(0==r.length)t=[];else if(1===r.length)t=[50];else{for(var e=0;e<r.length;e++)t.push([0,0]);for(var n=0;n<t.length;n++)t[n]=Math.round(1e4*r[n]/(2*r.length-2))/100}return t},matchpointsReverse:function(r){if(r==[])return[];let t=r.length,e=r.reduce((r,t)=>r+t,0),n=[];for(i=0;i<t;i++)reverse=2*e/t,n.push(reverse-r[i]);return n},matchpointsLeaderboard:function(r){let t=0,e=[],n=r.length,o=r[0].length;for(var a=0;a<o;a++)e.push([a,0,0]);for(a=0;a<n;a++)t=t+o-2;for(a=0;a<n;a++)for(var i=0;i<o;i++)e[i][1]=e[i][1]+r[a][i];for(a=0;a<o;a++)e[a][2]=Math.round(1e4*e[a][1]/t)/100;return e=e.sort((function(r,t){return t[1]-r[1]}))}}},function(r,t){r.exports={score:function(r,t,e,n,o,a){if(![0,1,2,3,4,5,6].includes(r))throw Error(`ValueError: level ${r} is invalid`);if(![0,1,2,3,4].includes(t))throw Error(`ValueError: suit ${t} is invalid`);if(![0,1,2].includes(e))throw Error(`ValueError: double ${e} is invalid`);if(![0,1,2,3].includes(n))throw Error(`ValueError: declarer ${n} is invalid`);if(![0,1].includes(o))throw Error(`ValueError: vulnerability ${o} is invalid`);if(![[-13,-12,-11,-10,-9],[-8,-7,-6,-5,-4,-3,-2],[-1,0,1,2,3,4,5,6]].flat().includes(a))throw Error(`ValueError: result ${a} is invalid`);const i=[[[20,40,80],[20,40,80]],[[20,40,80],[20,40,80]],[[30,60,120],[30,60,120]],[[30,60,120],[30,60,120]],[[40,80,160],[30,60,120]]],s=[[[20,100,200],[20,200,400]],[[20,100,200],[20,200,400]],[[30,100,200],[30,200,400]],[[30,100,200],[30,200,400]],[[30,100,200],[30,200,400]]],u=[[[50,50,50,50],[100,200,200,300],[200,400,400,600]],[[100,100,100,100],[200,300,300,300],[400,600,600,600]]],f=[[50,50],[300,500]],l=[[500,750],[1e3,1500]],h=[0,50,100];let c=0;if(a>=0)0==r?c+=i[t][0][e]:r>0&&(c+=i[t][0][e],c+=r*i[t][1][e]),c+=c<100?f[0][o]:f[1][o],r>=5&&(c+=l[r-5][o]),c+=h[e],a>0&&(c+=a*s[t][o][e]);else if(a<0)for(var b=0;b<-a;b++){let r=b>3?3:b;c-=u[o][e][r]}return n<2?c:-c}}},function(r,t){r.exports={impsToVictoryPoints:function(r,t){if(r%1!=0)throw"IMPs INT!";if(!(r<200))throw"IMPs < 200";if(!(r>-200))throw"IMPs > -200";if(6!=t&&7!=t&&8!=t&&9!=t&&10!=t&&12!=t&&14!=t&&16!=t&&20!=t&&32!=t)throw"boardCnt invalid";let e=!1;r<0&&(r=-r,e=!0),r>85&&(r=85);let n=[[10,10,10,10,10,10,10,10,10,10],[10.5,10.47,10.44,10.41,10.39,10.36,10.33,10.31,10.28,10.22],[10.99,10.92,10.86,10.81,10.77,10.71,10.66,10.61,10.55,10.44],[11.46,11.35,11.27,11.2,11.14,11.05,10.97,10.91,10.82,10.65],[11.9,11.77,11.67,11.58,11.5,11.38,11.28,11.2,11.08,10.86],[12.33,12.18,12.05,11.94,11.85,11.7,11.58,11.48,11.34,11.07],[12.75,12.57,12.42,12.29,12.18,12.01,11.87,11.76,11.59,11.27],[13.15,12.94,12.77,12.63,12.51,12.31,12.16,12.03,11.83,11.47],[13.53,13.31,13.12,12.96,12.83,12.61,12.44,12.29,12.07,11.67],[13.9,13.65,13.45,13.28,13.14,12.9,12.71,12.55,12.3,11.86],[14.25,13.99,13.78,13.59,13.43,13.18,12.97,12.8,12.53,12.05],[14.59,14.32,14.09,13.89,13.72,13.45,13.23,13.04,12.76,12.24],[14.92,14.63,14.39,14.18,14,13.71,13.48,13.28,12.98,12.42],[15.24,14.93,14.68,14.46,14.28,13.97,13.72,13.52,13.2,12.6],[15.54,15.22,14.96,14.74,14.54,14.22,13.96,13.75,13.41,12.78],[15.83,15.5,15.23,15,14.8,14.46,14.19,13.97,13.61,12.95],[16.11,15.78,15.5,15.26,15.05,14.7,14.42,14.18,13.81,13.12],[16.38,16.04,15.75,15.5,15.29,14.93,14.64,14.39,14.01,13.29],[16.64,16.29,16,15.74,15.52,15.15,14.85,14.6,14.2,13.46],[16.89,16.53,16.23,15.97,15.75,15.37,15.06,14.8,14.39,13.62],[17.12,16.77,16.46,16.2,15.97,15.58,15.26,15,14.58,13.78],[17.35,16.99,16.68,16.42,16.18,15.79,15.46,15.19,14.76,13.94],[17.58,17.21,16.9,16.63,16.39,15.99,15.66,15.38,14.94,14.09],[17.79,17.42,17.11,16.83,16.59,16.18,15.85,15.56,15.11,14.24],[17.99,17.62,17.31,17.03,16.78,16.37,16.03,15.74,15.28,14.39],[18.19,17.82,17.5,17.22,16.97,16.55,16.21,15.92,15.45,14.54],[18.38,18.01,17.69,17.41,17.16,16.73,16.38,16.09,15.61,14.68],[18.56,18.19,17.87,17.59,17.34,16.91,16.55,16.26,15.77,14.82],[18.73,18.36,18.04,17.76,17.51,17.08,16.72,16.42,15.93,14.96],[18.9,18.53,18.21,17.93,17.68,17.24,16.88,16.58,16.08,15.1],[19.06,18.69,18.37,18.09,17.84,17.4,17.04,16.73,16.23,15.24],[19.22,18.85,18.53,18.25,18,17.56,17.19,16.88,16.38,15.37],[19.37,19,18.68,18.4,18.15,17.71,17.34,17.03,16.52,15.5],[19.51,19.15,18.83,18.55,18.3,17.86,17.49,17.17,16.66,15.63],[19.65,19.29,18.97,18.69,18.44,18,17.63,17.31,16.8,15.76],[19.78,19.43,19.11,18.83,18.58,18.14,17.77,17.45,16.93,15.88],[19.91,19.56,19.24,18.97,18.71,18.28,17.91,17.59,17.06,16],[20,19.68,19.37,19.1,18.84,18.41,18.04,17.72,17.19,16.12],[20,19.8,19.5,19.22,18.97,18.54,18.17,17.85,17.32,16.24],[20,19.92,19.62,19.34,19.1,18.66,18.29,17.97,17.44,16.35],[20,20,19.74,19.46,19.22,18.78,18.41,18.09,17.56,16.46],[20,20,19.85,19.58,19.33,18.9,18.53,18.21,17.68,16.57],[20,20,19.95,19.69,19.44,19.02,18.65,18.33,17.79,16.68],[20,20,20,19.8,19.55,19.13,18.76,18.44,17.9,16.79],[20,20,20,19.9,19.66,19.24,18.87,18.55,18.01,16.9],[20,20,20,20,19.76,19.34,18.98,18.66,18.12,17.01],[20,20,20,20,19.86,19.44,19.08,18.77,18.23,17.11],[20,20,20,20,19.96,19.54,19.18,18.87,18.33,17.21],[20,20,20,20,20,19.64,19.28,18.97,18.43,17.31],[20,20,20,20,20,19.74,19.38,19.07,18.53,17.41],[20,20,20,20,20,19.83,19.47,19.16,18.63,17.51],[20,20,20,20,20,19.92,19.56,19.25,18.73,17.6],[20,20,20,20,20,20,19.65,19.34,18.82,17.69],[20,20,20,20,20,20,19.74,19.43,18.91,17.78],[20,20,20,20,20,20,19.83,19.52,19,17.87],[20,20,20,20,20,20,19.91,19.61,19.09,17.96],[20,20,20,20,20,20,19.99,19.69,19.17,18.05],[20,20,20,20,20,20,20,19.77,19.25,18.13],[20,20,20,20,20,20,20,19.85,19.33,18.21],[20,20,20,20,20,20,20,19.93,19.41,18.29],[20,20,20,20,20,20,20,20,19.49,18.37],[20,20,20,20,20,20,20,20,19.57,18.45],[20,20,20,20,20,20,20,20,19.65,18.53],[20,20,20,20,20,20,20,20,19.72,18.61],[20,20,20,20,20,20,20,20,19.79,18.69],[20,20,20,20,20,20,20,20,19.86,18.76],[20,20,20,20,20,20,20,20,19.93,18.83],[20,20,20,20,20,20,20,20,19.99,18.9],[20,20,20,20,20,20,20,20,20,18.97],[20,20,20,20,20,20,20,20,20,19.04],[20,20,20,20,20,20,20,20,20,19.11],[20,20,20,20,20,20,20,20,20,19.18],[20,20,20,20,20,20,20,20,20,19.25],[20,20,20,20,20,20,20,20,20,19.32],[20,20,20,20,20,20,20,20,20,19.38],[20,20,20,20,20,20,20,20,20,19.44],[20,20,20,20,20,20,20,20,20,19.5],[20,20,20,20,20,20,20,20,20,19.56],[20,20,20,20,20,20,20,20,20,19.62],[20,20,20,20,20,20,20,20,20,19.68],[20,20,20,20,20,20,20,20,20,19.74],[20,20,20,20,20,20,20,20,20,19.8],[20,20,20,20,20,20,20,20,20,19.85],[20,20,20,20,20,20,20,20,20,19.9],[20,20,20,20,20,20,20,20,20,19.95],[20,20,20,20,20,20,20,20,20,20]][r][{6:0,7:1,8:2,9:3,10:4,12:5,14:6,16:7,20:8,32:9}[t]],o=Math.round(100*(20-n))/100;return e?[o,n]:[n,o]}}},function(r,t,e){r.exports={binomial:e(2),factorial:e(2),percentageRounded:e(2),hcpRange:e(21),distribution:e(22),allDistributionsWithProbabilityByMissingCards:e(3),probabilityOfMissingCardsByDistribution:e(3)}},function(r,t,e){const{binomial:n,percentageRounded:o}=e(2);r.exports={hcpRange:function(r,t=r){if(![...Array(38).keys()].includes(r))throw"1014: hcpMin invalid.";if(![...Array(38).keys()].includes(t))throw"1014: hcpMax invalid.";if(r>t)throw"1014: hcpMin can not be larger than hcpMax.";let e=0;for(var a=0;a<=4;a++)for(var i=0;i<=4;i++)for(var s=0;s<=4;s++)for(var u=0;u<=Math.min(4,13-a-i-s);u++)4*a+3*i+2*s+1*u<=t&&r<=4*a+3*i+2*s+1*u&&(e+=n(4,a)*n(4,i)*n(4,s)*n(4,u)*n(36,13-a-i-s-u));return[e,o(e/n(52,13))]}}},function(r,t,e){const{binomial:n,factorial:o,percentageRounded:a}=e(2);r.exports={distributions:function(r=!1){if("boolean"!=typeof r)throw"1014: Input must be boolean.";let t=[];if(r)for(var e=0;e<=13;e++)for(var n=0;n<=13-e;n++)for(var o=0;o<=13-e-n;o++)for(var a=0;a<=13-e-n-o;a++)e+n+o+a===13&&t.push([e,n,o,a]);else t=[[4,3,3,3],[4,4,3,2],[4,4,4,1],[5,3,3,2],[5,4,2,2],[5,4,3,1],[5,4,4,0],[5,5,2,1],[5,5,3,0],[6,3,2,2],[6,3,3,1],[6,4,2,1],[6,4,3,0],[6,5,1,1],[6,5,2,0],[6,6,1,0],[7,2,2,2],[7,3,2,1],[7,3,3,0],[7,4,1,1],[7,4,2,0],[7,5,1,0],[7,6,0,0],[8,2,2,1],[8,3,1,1],[8,3,2,0],[8,4,1,0],[8,5,0,0],[9,2,1,1],[9,2,2,0],[9,3,1,0],[9,4,0,0],[10,1,1,1],[10,2,1,0],[10,3,0,0],[11,1,1,0],[11,2,0,0],[12,1,0,0],[13,0,0,0]];return t},distributionProbability:function(r,t=!1){for(var e=0;e<4;e++)if(![...Array(14).keys()].includes(r[e]))throw"1014: Invalid Input";if(r[0]+r[1]+r[2]+r[3]!==13)throw"1014: Invalid amount of cards.";if(!0!==t&&!1!==t)throw"1014: fix must be boolean.";let i=0;if(i=n(13,r[0])*n(13,r[1])*n(13,r[2])*n(13,r[3]),!t){i*=o(4);for(var s=0;s<=13;s++)i/=o(r.filter(r=>r==s).length)}return a(i/n(52,13))},distributionHandcnt:function(r,t=!1){for(var e=0;e<4;e++)if(![...Array(14).keys()].includes(r[e]))throw"1014: Invalid Input";if(r[0]+r[1]+r[2]+r[3]!==13)throw"1014: Invalid amount of cards.";if(!0!==t&&!1!==t)throw"1014: fix must be boolean.";let a=0;if(a=n(13,r[0])*n(13,r[1])*n(13,r[2])*n(13,r[3]),!t){a*=o(4);for(var i=0;i<=13;i++)a/=o(r.filter(r=>r==i).length)}return a},shortestSuitDistributions:function(r){if(![...Array(4).keys()].includes(r))throw"1014: Invalid Input";switch(r){case 0:return[[13,0,0,0],[12,1,0,0],[11,2,0,0],[11,1,1,0],[10,3,0,0],[10,2,1,0],[9,4,0,0],[9,3,1,0],[9,2,2,0],[8,5,0,0],[8,4,1,0],[8,3,2,0],[7,6,0,0],[7,5,1,0],[7,4,2,0],[7,3,3,0],[6,6,1,0],[6,5,2,0],[6,4,3,0],[5,5,3,0],[5,4,4,0]];case 1:return[[4,4,4,1],[5,4,3,1],[5,5,2,1],[6,3,3,1],[6,4,2,1],[6,5,1,1],[7,3,2,1],[7,4,1,1],[8,2,2,1],[8,3,1,1],[9,2,1,1],[10,1,1,1]];case 2:return[[4,4,3,2],[5,3,3,2],[5,4,2,2],[6,3,2,2],[7,2,2,2]];case 3:return[[4,3,3,3]]}},shortestSuitProbability:function(r){if(![...Array(4).keys()].includes(r))throw"1014: Invalid Input";switch(r){case 0:return.0512;case 1:return.3055;case 2:return.538;case 3:return.1054}},longestSuitDistributions:function(r){if(![...Array(14).keys()].slice(4).includes(r))throw"1014: Invalid Input";switch(r){case 4:return[[4,3,3,3],[4,4,3,2],[4,4,4,1]];case 5:return[[5,3,3,2],[5,4,2,2],[5,4,3,1],[5,5,2,1],[5,4,4,0],[5,5,3,0]];case 6:return[[6,3,2,2],[6,3,3,1],[6,4,2,1],[6,4,3,0],[6,5,1,1],[6,5,2,0],[6,6,1,0]];case 7:return[[7,2,2,2],[7,3,2,1],[7,3,3,0],[7,4,1,1],[7,4,2,0],[7,5,1,0],[7,6,0,0]];case 8:return[[8,2,2,1],[8,3,1,1],[8,3,2,0],[8,4,1,0],[8,5,0,0]];case 9:return[[9,2,1,1],[9,2,2,0],[9,3,1,0],[9,4,0,0]];case 10:return[[10,1,1,1],[10,2,1,0],[10,3,0,0]];case 11:return[[11,1,1,0],[11,2,0,0]];case 12:return[[12,1,0,0]];case 13:return[[13,0,0,0]]}},longestSuitProbability:function(r){if(![...Array(14).keys()].slice(4).includes(r))throw"1014: Invalid Input";switch(r){case 4:return.3508;case 5:return.4434;case 6:return.1655;case 7:return.0353;case 8:return.0047;case 9:return 37e-5;case 10:return 17e-6;case 11:return 3e-7;case 12:return 3e-9;case 13:return 6e-12}},handtypeDistributions:function(r){switch(r){case 0:return[[4,3,3,3],[4,4,3,2],[5,3,3,2]];case 1:return[[6,3,2,2],[6,3,3,1],[6,4,2,1],[6,4,3,0],[7,2,2,2],[7,3,2,1],[7,3,3,0],[7,4,1,1],[7,4,2,0],[7,5,1,0],[8,2,2,1],[8,3,1,1],[8,3,2,0],[8,4,1,0],[8,5,0,0],[9,2,1,1],[9,2,2,0],[9,3,1,0],[9,4,0,0],[10,1,1,1],[10,2,1,0],[10,3,0,0],[11,1,1,0],[11,2,0,0],[12,1,0,0],[13,0,0,0]];case 2:return[[5,4,2,2],[5,4,3,1],[5,5,2,1],[5,5,3,0],[6,5,1,1],[6,5,2,0],[6,6,1,0],[7,6,0,0]];case 3:return[[4,4,4,1],[5,4,4,0]]}},handtypeProbability:function(r){switch(r){case 0:return 47.61;case 1:return 19.15;case 2:return 29.02;case 3:return 4.23}}}},function(r,t){const e=Object.freeze({suits2num:Object.freeze({clubs:0,diamonds:1,hearts:2,spades:3,notrump:4}),num2suits:Object.freeze({0:"clubs",1:"diamonds",2:"hearts",3:"spades",4:"notrump"}),level2num:Object.freeze({1:0,2:1,3:2,4:3,5:4,6:5,7:6}),level2num:Object.freeze({0:1,1:2,2:3,3:4,4:5,5:6,6:7}),vulnerable2num:Object.freeze({none:0,"north-south":1,"east-west":2,all:3}),num2vulnerable:Object.freeze({0:"none",1:"north-south",2:"east-west",3:"all"}),declarer2num:Object.freeze({north:0,east:1,south:2,west:3}),num2declarer:Object.freeze({0:"north",1:"east",2:"south",3:"west"}),double2num:Object.freeze({none:0,double:1,redouble:2}),num2double:Object.freeze({0:"none",1:"double",2:"redouble"})});r.exports={Enum:e}}]);